public class lesson_19_09 {
    //Лямбда-выражения в Java

    //Допустим, вы решили использовать в вашем коде анонимный внутренний класс.

    //В этом случае у вас будет блок кода типа такого:

    /*
    Comparator<String> comparator = new Comparator<String>()
    {
        public int compare (String obj1, String obj2)
        {
            return obj1.length() - obj2.length();
        }
    };
    */

    //Тут и объявление переменной, и создание анонимного класса — все вместе.
    //Однако есть способ записать этот код короче. Например, так:

    /*
    Comparator<String> comparator = (String obj1, String obj2) ->
    {
        return obj1.length() - obj2.length();
    };
    */

    //Точка с запятой нужна, т.к. у вас тут не только скрытое объявление класса, но и создание переменной.

    //Такая запись называется лямбда-выражением.

    //Если компилятор встретит такую запись в вашем коде,
    //он просто сгенерирует по ней полную версию кода (с анонимным внутренним классом).
    //Обратите внимание: при записи лямбда-выражения мы опустили не только имя класса Comparator<String>,
    //но и имя метода int compare().

    //У компилятора не возникнет проблем с определением метода,
    //т.к. лямбда-выражение можно писать только для интерфейсов, у которых метод один.
    //Впрочем, есть способ обойти это правило, но об этом вы узнаете, когда начнете изучать ООП активнее (мы говорим о default-методах).


}

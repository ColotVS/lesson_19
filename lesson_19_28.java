public class lesson_19_28 {
    //Intermediate и terminal методы Stream

    //Как вы заметили, не все методы, представленные в таблице выше, возвращают Stream.
    //Это связано с тем, что методы класса Stream можно разделить на промежуточные (intermediate, non‑terminal) и конечные (terminal).

    //Промежуточные методы
    //Промежуточные методы возвращают объект, который имплементирует интерфейс Stream, и их можно выстроить в цепочку вызовов.

    //Конечные методы
    //Конечные методы возвращают значение, тип которого отличен от типа Stream.

    //Цепочка вызовов методов
    //Таким образом, вы можете строить цепочки вызовов из любого количества промежуточных методов и в конце вызывать один конечный.
    //Такой подход позволяет реализовать довольно сложную логику, повышая при этом читаемость кода.

    //Внутри потока данных, данные вообще не меняются.
    //Цепочка промежуточных методов – это хитрый (декларативный) способ указания некой последовательности обработки данных,
    //которая начнет выполняться после вызова терминального (конечного) метода.

    //То есть, без вызова конечного метода, данные в потоке данных никак не обрабатываются.
    //И только после вызова терминального метода, данные начинают обрабатываться по правилам, заданным цепочкой вызовов методов.

    //   stream()
    //  .intemediateOperation1()
    //  .intemediateOperation2()
    //  ...
    //  .intemediateOperationN()
    //  .terminalOperation();
    //Общий вид цепочки вызовов

    //Сравнение промежуточных и конечных методов:

    //                                                                          промежуточные	        конечные
    //Тип возвращаемого значения	                                            Stream	                не Stream
    //Возможность объединения нескольких методов данного типа в цепочку вызовов	да	                    нет
    //Количество методов в одной цепочке вызовов	                            любое	                не более одного
    //Производит конечный результат	                                            нет	                    да
    //Запускает обработку данных в потоке	                                    нет	                    да

}

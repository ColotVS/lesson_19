public class lesson_19_01 {
    //Чтобы понимать, что такое лямбда-функции, сначала нужно понимать, что такое интерфейсы.
    //Поэтому напомним основные моменты.

    //Интерфейс — это разновидность класса. Сильно урезанная, если можно так сказать.

    //У интерфейса, в отличие от класса, не может быть своих переменных (кроме статических).
    //Также нельзя создавать объекты типа Интерфейс

    //Нельзя объявлять переменные класса
    //Нельзя создавать объекты

    //Пример:
    /*
    interface Runnable
    {
        void run();
    }
    */
    //Пример стандартного интерфейса

    //Использование интерфейса

    //Так зачем же интерфейс нужен? Интерфейсы используются только совместно с наследованием.
    //Один и тот же интерфейс могут наследовать разные классы, или еще говорят, что классы реализуют интерфейс.

    //Если класс реализует интерфейс, он обязан реализовать у себя внутри те методы,
    //которые были объявлены, но не реализованы внутри интерфейса.

    //Пример:

    /*
    interface Runnable
    {
        void run();
    }

    class Timer implements Runnable
    {
        void run()
        {
            System.out.println(LocalTime.now());
        }
    }

    class Calendar implements Runnable
    {
        void run()
        {
            var date = LocalDate.now();
            System.out.println("Сегодня " + date.getDayOfWeek());
        }
    }
    */

    //Класс Timer реализует (implements) интерфейс Runnable, поэтому обязан объявить внутри себя все методы,
    //которые есть в интерфейсе Runnable и реализовать их: написать код в теле метода. То же касается и класса Calendar.
    //Зато теперь в переменные типа Runnable можно сохранять ссылки на объекты классов, которые реализуют интерфейс Runnable.

    //Пример:

    //Timer timer = new Timer();            Будет вызван метод run() класса Timer
    //timer.run();

    //Runnable r1 = new Timer();            Будет вызван метод run() класса Timer
    //r1.run();

    //Runnable r2 = new Calendar();         Будет вызван метод run() класса Calendar
    //r2.run();

    //Вы всегда можете присвоить ссылку на объект переменной любого типа, если этот тип — один из классов-родителей объекта.
    //Для классов Timer и Calendar таких типов два: Object и Runnable.
    //Если вы присвоите ссылку на объект переменной типа Object, сможете вызывать у нее только методы, объявленные в классе Object.
    //А если присвоите ссылку на объект переменной типа Runnable, сможете вызвать у нее методы, которые есть в типе Runnable.

    //Пример 2:

    //ArrayList<Runnable> list = new ArrayList<Runnable>();
    //list.add (new Timer());
    //list.add (new Calendar());
    //for (Runnable element: list)
    //    element.run();

    //Такой код будет работать, ведь у объектов Timer и Calendar есть отличные рабочие методы run.
    //Поэтому нет никаких проблем с тем, чтобы их вызвать.
    //Если бы мы просто добавили метод run() в оба класса, не смогли бы вызвать их таким простым способом.
    //Интерфейс Runnable фактически используется только для того, чтобы было куда поместить метод run.
}

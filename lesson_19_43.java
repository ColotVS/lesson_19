public class lesson_19_43 {
    //Поиск элементов

    //Вернемся к классу Stream. У класса Stream есть еще 4 метода, которые позволяют искать элементы в потоке.
    //Это методы findFirst(), findAny(), min() и max().


    //Метод Optional<T> findFirst()

    //Метод findFirst() просто возвращает первый элемент из потока и все — на этом его работа завершается.
    //Более интересно, что метод возвращает не объект типа T, а обертку над ним — объект типа Optional<T>.
    //Это сделано для того, чтобы никогда не сталкиваться с ситуацией, когда метод не находит объект и возвращает null.

    //Пример:
    //ArrayList<String> list = new ArrayList<String>();
    //Collections.addAll(list, "Привет", "как", "дела?");
    //String str = list.stream().findFirst().get(); // Привет
    //Последний метод get() — это просто вытаскивание значения, которое хранится внутри объекта Optional.


    //Метод Optional<T> findAny()

    //Метод findAny() возвращает любой элемент из потока и на этом завершается.
    //Этот метод — это аналог метода findFirst(), только для потоков, которые обрабатываются параллельно.
    //При параллельной обработке потоков может случиться такая ситуация,
    //что в какой-то части потока элемент уже найден, но пока еще не понятно, будет он первым или нет.
    //Если элементов, которые прошли все фильтры, много и для программиста принципиально получить именно первый из них,
    //следует вызывать метод findFirst().
    //Если программист знает, что реально через все фильтры пройдет 0 или 1 элемент,
    //тогда достаточно просто вызвать findAny() — так будет быстрее.


    //Метод Optional<T> min(Comparator<T>)

    //Метод min() сравнивает все элементы потока с помощью объекта comparator и возвращает минимальный элемент.
    //Удобнее всего задать объект-компаратор с помощью лямбда-функции.

    //Пример — поиск строки с минимальной длиной:
    //ArrayList<String> list = new ArrayList<String>();
    //Collections.addAll(list, "Привет", "как", "дела?");
    //String min = list.stream().min( (s1, s2)-> s1.length()-s2.length() ).get();


    //Метод Optional<T> max(Comparator<T>)

    //Метод max() сравнивает все элементы потока с помощью объекта comparator и возвращает максимальный элемент.
    //Удобнее всего задать объект-компаратор с помощью лямбда-функции.

    //Пример — поиск строки с максимальной длиной:
    //ArrayList<String> list = new ArrayList<String>();
    //Collections.addAll(list, "Привет", "как", "дела?");
    //String max = list.stream().max( (s1, s2)-> s1.length()-s2.length() ).get();
}

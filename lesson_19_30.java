public class lesson_19_30 {
    //Создание потоков

    //Среди методов класса Stream есть три метода, которые мы еще не рассмотрели. Задача этих трех методов — создавать новые потоки.

    //Метод Stream<T>.of(T obj)

    //Метод of() создает поток, состоящий из одного элемента.
    //Обычно это нужно, если, допустим, функция принимает в качестве параметра объект типа Stream<T>, а у вас есть только объект типа T.
    //Тогда вы можете легко и просто с помощью метода of() получить поток, состоящий из одного элемента.
    //Пример:
    //Stream<Integer> stream = Stream.of(1);


    //Метод Stream<T> Stream.of(T obj1, T obj2, T obj3, ...)

    //Метод of() создает поток, состоящий из переданных элементов. Количество элементов может быть любым.
    //Пример:
    //Stream<Integer> stream = Stream.of(1, 2, 3, 4, 5);


    //Метод Stream<T> Stream.generate(Supplier<T> obj)

    //Метод generate() позволяет задать правило, по которому будет генерироваться очередной элемент потока при его запросе.
    //Например, можно каждый раз отдавать случайное число.
    //Пример:
    //Stream<Double> s = Stream.generate(Math::random);


    //Метод Stream<T> Stream.concat(Stream<T> a, Stream<T> b)

    //Метод concat() объединяет два переданных потока в один.
    //При чтении данных сначала будут прочитаны данные из первого потока, а затем из второго.
    //Пример:
    //Stream<Integer> stream1 = Stream.of(1, 2, 3, 4, 5);
    //Stream<Integer> stream2 = Stream.of(10, 11, 12, 13, 14);
    //Stream<Integer> result = Stream.concat(stream1, stream2);
}

public class lesson_19_25 {
    //Интерфейс Stream

    //Расширенная поддержка потоков в Java 8 реализована с помощью интерфейса Stream<T>.
    //Где T — это тип-параметр, обозначающий тип данных, которые передаются в потоке.
    //Другими словами, поток полностью независим от типа данных, которые он передает.

    //Чтобы получить объект-поток у коллекции, достаточно вызвать у нее метод stream(). Выглядит этот код примерно так:
    //Stream<Тип> имя = коллекция.stream();
    //Получение потока из коллекции

    //При этом коллекция будет считаться источником данных потока,
    //а объект типа Stream<Тип> – инструментом по получению данных из коллекции именно в виде потока данных.

    //ArrayList<String> list = new ArrayList<String>();
    //Collections.addAll(list, "Привет", "как", "дела?");
    //Stream<String> stream = list.stream();

    //Кстати, можно получить поток не только у коллекции, но и у массива.
    //Для этого нужно воспользоваться методом Arrays.stream(); Пример:

    //Stream<Тип> имя = Arrays.stream(массив);
    //Получение потока из массива
    //При этом массив будет считаться источником данных для потока имя.

    //Integer[] array = {1, 2, 3};
    //Stream<Integer> stream = Arrays.stream(array);

    //После создания объекта Stream<Тип> никакого движения данных не происходит.
    //Мы просто получили объект-поток для того, чтобы начать строить цепочку из потоков-данных.
}
